/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_MESSAGE_PB_H_INCLUDED
#define PB_MESSAGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _RadioRegion {
    RadioRegion_REGION_US915 = 0,
    RadioRegion_REGION_AU915 = 1,
    RadioRegion_REGION_EU868 = 2
} RadioRegion;

typedef enum _RadioAuth {
    RadioAuth_AUTH_OTAA = 0,
    RadioAuth_AUTH_ABP = 1
} RadioAuth;

typedef enum _AccelSampleRate {
    AccelSampleRate_ACCEL_25HZ = 0,
    AccelSampleRate_ACCEL_50HZ = 1
} AccelSampleRate;

typedef enum _AccelSensitivity {
    AccelSensitivity_ACCEL_2G = 0,
    AccelSensitivity_ACCEL_4G = 1,
    AccelSensitivity_ACCEL_8G = 2
} AccelSensitivity;

typedef enum _Activity {
    Activity_STILL = 0,
    Activity_WALK = 1,
    Activity_RUN = 2
} Activity;

/* Struct definitions */
typedef struct _PacketHeader {
    uint32_t system_uid;
    uint32_t ms_from_start;
    uint64_t epoch;
    uint32_t packet_index;
} PacketHeader;

/* 20 to 6 means 8pm to 6am */
typedef struct _TimeWindow {
    uint32_t start_hour; /* 0 to 23 (inclusive) */
    uint32_t end_hour; /* 0 to 23 (inclusive) */
} TimeWindow;

/* Enabled/disabled and sample interval for each sensor */
typedef struct _SamplingConfig {
    bool enabled;
    uint32_t sample_interval_min; /* minutes */
} SamplingConfig;

/* GPS */
typedef struct _GPSConfig {
    bool enabled;
    uint32_t sample_interval_min;
    uint32_t accuracy; /* 1 to 10 */
} GPSConfig;

typedef struct _RadioOTAA {
    pb_callback_t dev_eui; /* 8 bytes */
    pb_callback_t join_eui; /* 8 bytes */
    pb_callback_t app_key; /* 16 bytes */
} RadioOTAA;

typedef struct _RadioABP {
    pb_callback_t dev_addr; /* 4 bytes */
    pb_callback_t nwk_s_key; /* 16 bytes */
    pb_callback_t app_s_key; /* 16 bytes */
    pb_callback_t f_nwk_s_int_key; /* 16 bytes */
    pb_callback_t s_nwk_s_int_key; /* 16 bytes */
} RadioABP;

typedef struct _RadioConfig {
    bool enabled;
    RadioRegion region;
    RadioAuth auth;
    pb_size_t which_credentials;
    union {
        RadioOTAA otaa;
        RadioABP abp;
    } credentials;
    uint32_t transmit_interval_min;
    bool tx_only_on_new_gps_fix;
    int32_t tx_power_dbm;
} RadioConfig;

typedef struct _MicrophoneConfig {
    bool enabled;
    bool continuous_mode; /* on if true */
    uint32_t sample_length_min;
    uint32_t sample_window_min;
} MicrophoneConfig;

typedef struct _AccelerometerConfig {
    bool enabled;
    AccelSampleRate sample_rate;
    AccelSensitivity sensitivity;
} AccelerometerConfig;

typedef struct _FirmwareInfo {
    pb_callback_t version;
} FirmwareInfo;

/* schedule that is applied during each TimeWindow */
typedef struct _ScheduledConfig {
    bool has_window;
    TimeWindow window;
    bool has_light;
    SamplingConfig light;
    bool has_environmental;
    SamplingConfig environmental;
    bool has_particulate;
    SamplingConfig particulate;
    bool has_gps;
    GPSConfig gps;
    bool has_radio;
    RadioConfig radio;
    bool has_microphone;
    MicrophoneConfig microphone;
    bool has_accelerometer;
    AccelerometerConfig accelerometer;
    bool has_firmware;
    FirmwareInfo firmware;
} ScheduledConfig;

/* can include multiple schedules */
typedef struct _ScheduleConfigPacket {
    pb_callback_t schedules;
} ScheduleConfigPacket;

typedef struct _SimpleSensorReading {
    uint32_t index;
    uint32_t epoch;
    float temperature;
    float humidity;
    float pressure;
    float gas;
    float pm2_5;
    uint32_t light;
    Activity activity;
    uint32_t steps;
    bool particulate_static_obstructed;
    bool particulate_dynamic_obstructed;
    bool particulate_outside_detection_limits;
} SimpleSensorReading;

typedef struct _BatteryState {
    bool charging;
    float voltage;
    bool has_percentage;
    float percentage;
} BatteryState;

typedef struct _SDCardState {
    bool detected;
    uint64_t space_remaining; /* bytes */
    uint64_t total_space; /* bytes */
} SDCardState;

typedef struct _GPSData {
    float latitude;
    float longitude;
    float altitude;
    float speed;
    float heading;
} GPSData;

typedef struct _SystemStatePacket {
    bool engage_state; /* engaged/disengaged */
    bool has_battery_state;
    BatteryState battery_state;
    bool has_sdcard_state;
    SDCardState sdcard_state;
    bool has_gps_data;
    GPSData gps_data;
    bool has_simple_sensor_reading;
    SimpleSensorReading simple_sensor_reading;
} SystemStatePacket;

typedef struct _Packet {
    bool has_header;
    PacketHeader header;
    pb_size_t which_payload;
    union {
        ScheduleConfigPacket schedule_config_packet;
        SystemStatePacket system_state_packet;
    } payload;
} Packet;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _RadioRegion_MIN RadioRegion_REGION_US915
#define _RadioRegion_MAX RadioRegion_REGION_EU868
#define _RadioRegion_ARRAYSIZE ((RadioRegion)(RadioRegion_REGION_EU868+1))

#define _RadioAuth_MIN RadioAuth_AUTH_OTAA
#define _RadioAuth_MAX RadioAuth_AUTH_ABP
#define _RadioAuth_ARRAYSIZE ((RadioAuth)(RadioAuth_AUTH_ABP+1))

#define _AccelSampleRate_MIN AccelSampleRate_ACCEL_25HZ
#define _AccelSampleRate_MAX AccelSampleRate_ACCEL_50HZ
#define _AccelSampleRate_ARRAYSIZE ((AccelSampleRate)(AccelSampleRate_ACCEL_50HZ+1))

#define _AccelSensitivity_MIN AccelSensitivity_ACCEL_2G
#define _AccelSensitivity_MAX AccelSensitivity_ACCEL_8G
#define _AccelSensitivity_ARRAYSIZE ((AccelSensitivity)(AccelSensitivity_ACCEL_8G+1))

#define _Activity_MIN Activity_STILL
#define _Activity_MAX Activity_RUN
#define _Activity_ARRAYSIZE ((Activity)(Activity_RUN+1))







#define RadioConfig_region_ENUMTYPE RadioRegion
#define RadioConfig_auth_ENUMTYPE RadioAuth


#define AccelerometerConfig_sample_rate_ENUMTYPE AccelSampleRate
#define AccelerometerConfig_sensitivity_ENUMTYPE AccelSensitivity




#define SimpleSensorReading_activity_ENUMTYPE Activity







/* Initializer values for message structs */
#define PacketHeader_init_default                {0, 0, 0, 0}
#define TimeWindow_init_default                  {0, 0}
#define SamplingConfig_init_default              {0, 0}
#define GPSConfig_init_default                   {0, 0, 0}
#define RadioOTAA_init_default                   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RadioABP_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RadioConfig_init_default                 {0, _RadioRegion_MIN, _RadioAuth_MIN, 0, {RadioOTAA_init_default}, 0, 0, 0}
#define MicrophoneConfig_init_default            {0, 0, 0, 0}
#define AccelerometerConfig_init_default         {0, _AccelSampleRate_MIN, _AccelSensitivity_MIN}
#define FirmwareInfo_init_default                {{{NULL}, NULL}}
#define ScheduledConfig_init_default             {false, TimeWindow_init_default, false, SamplingConfig_init_default, false, SamplingConfig_init_default, false, SamplingConfig_init_default, false, GPSConfig_init_default, false, RadioConfig_init_default, false, MicrophoneConfig_init_default, false, AccelerometerConfig_init_default, false, FirmwareInfo_init_default}
#define ScheduleConfigPacket_init_default        {{{NULL}, NULL}}
#define SimpleSensorReading_init_default         {0, 0, 0, 0, 0, 0, 0, 0, _Activity_MIN, 0, 0, 0, 0}
#define BatteryState_init_default                {0, 0, false, 0}
#define SDCardState_init_default                 {0, 0, 0}
#define GPSData_init_default                     {0, 0, 0, 0, 0}
#define SystemStatePacket_init_default           {0, false, BatteryState_init_default, false, SDCardState_init_default, false, GPSData_init_default, false, SimpleSensorReading_init_default}
#define Packet_init_default                      {false, PacketHeader_init_default, 0, {ScheduleConfigPacket_init_default}}
#define PacketHeader_init_zero                   {0, 0, 0, 0}
#define TimeWindow_init_zero                     {0, 0}
#define SamplingConfig_init_zero                 {0, 0}
#define GPSConfig_init_zero                      {0, 0, 0}
#define RadioOTAA_init_zero                      {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RadioABP_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RadioConfig_init_zero                    {0, _RadioRegion_MIN, _RadioAuth_MIN, 0, {RadioOTAA_init_zero}, 0, 0, 0}
#define MicrophoneConfig_init_zero               {0, 0, 0, 0}
#define AccelerometerConfig_init_zero            {0, _AccelSampleRate_MIN, _AccelSensitivity_MIN}
#define FirmwareInfo_init_zero                   {{{NULL}, NULL}}
#define ScheduledConfig_init_zero                {false, TimeWindow_init_zero, false, SamplingConfig_init_zero, false, SamplingConfig_init_zero, false, SamplingConfig_init_zero, false, GPSConfig_init_zero, false, RadioConfig_init_zero, false, MicrophoneConfig_init_zero, false, AccelerometerConfig_init_zero, false, FirmwareInfo_init_zero}
#define ScheduleConfigPacket_init_zero           {{{NULL}, NULL}}
#define SimpleSensorReading_init_zero            {0, 0, 0, 0, 0, 0, 0, 0, _Activity_MIN, 0, 0, 0, 0}
#define BatteryState_init_zero                   {0, 0, false, 0}
#define SDCardState_init_zero                    {0, 0, 0}
#define GPSData_init_zero                        {0, 0, 0, 0, 0}
#define SystemStatePacket_init_zero              {0, false, BatteryState_init_zero, false, SDCardState_init_zero, false, GPSData_init_zero, false, SimpleSensorReading_init_zero}
#define Packet_init_zero                         {false, PacketHeader_init_zero, 0, {ScheduleConfigPacket_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define PacketHeader_system_uid_tag              1
#define PacketHeader_ms_from_start_tag           2
#define PacketHeader_epoch_tag                   3
#define PacketHeader_packet_index_tag            4
#define TimeWindow_start_hour_tag                1
#define TimeWindow_end_hour_tag                  2
#define SamplingConfig_enabled_tag               1
#define SamplingConfig_sample_interval_min_tag   2
#define GPSConfig_enabled_tag                    1
#define GPSConfig_sample_interval_min_tag        2
#define GPSConfig_accuracy_tag                   3
#define RadioOTAA_dev_eui_tag                    1
#define RadioOTAA_join_eui_tag                   2
#define RadioOTAA_app_key_tag                    3
#define RadioABP_dev_addr_tag                    1
#define RadioABP_nwk_s_key_tag                   2
#define RadioABP_app_s_key_tag                   3
#define RadioABP_f_nwk_s_int_key_tag             4
#define RadioABP_s_nwk_s_int_key_tag             5
#define RadioConfig_enabled_tag                  1
#define RadioConfig_region_tag                   2
#define RadioConfig_auth_tag                     3
#define RadioConfig_otaa_tag                     4
#define RadioConfig_abp_tag                      5
#define RadioConfig_transmit_interval_min_tag    6
#define RadioConfig_tx_only_on_new_gps_fix_tag   7
#define RadioConfig_tx_power_dbm_tag             8
#define MicrophoneConfig_enabled_tag             1
#define MicrophoneConfig_continuous_mode_tag     2
#define MicrophoneConfig_sample_length_min_tag   3
#define MicrophoneConfig_sample_window_min_tag   4
#define AccelerometerConfig_enabled_tag          1
#define AccelerometerConfig_sample_rate_tag      2
#define AccelerometerConfig_sensitivity_tag      3
#define FirmwareInfo_version_tag                 1
#define ScheduledConfig_window_tag               1
#define ScheduledConfig_light_tag                2
#define ScheduledConfig_environmental_tag        3
#define ScheduledConfig_particulate_tag          4
#define ScheduledConfig_gps_tag                  5
#define ScheduledConfig_radio_tag                6
#define ScheduledConfig_microphone_tag           7
#define ScheduledConfig_accelerometer_tag        8
#define ScheduledConfig_firmware_tag             9
#define ScheduleConfigPacket_schedules_tag       1
#define SimpleSensorReading_index_tag            1
#define SimpleSensorReading_epoch_tag            2
#define SimpleSensorReading_temperature_tag      3
#define SimpleSensorReading_humidity_tag         4
#define SimpleSensorReading_pressure_tag         5
#define SimpleSensorReading_gas_tag              6
#define SimpleSensorReading_pm2_5_tag            7
#define SimpleSensorReading_light_tag            8
#define SimpleSensorReading_activity_tag         9
#define SimpleSensorReading_steps_tag            10
#define SimpleSensorReading_particulate_static_obstructed_tag 11
#define SimpleSensorReading_particulate_dynamic_obstructed_tag 12
#define SimpleSensorReading_particulate_outside_detection_limits_tag 13
#define BatteryState_charging_tag                1
#define BatteryState_voltage_tag                 2
#define BatteryState_percentage_tag              3
#define SDCardState_detected_tag                 1
#define SDCardState_space_remaining_tag          2
#define SDCardState_total_space_tag              3
#define GPSData_latitude_tag                     1
#define GPSData_longitude_tag                    2
#define GPSData_altitude_tag                     3
#define GPSData_speed_tag                        4
#define GPSData_heading_tag                      5
#define SystemStatePacket_engage_state_tag       1
#define SystemStatePacket_battery_state_tag      2
#define SystemStatePacket_sdcard_state_tag       3
#define SystemStatePacket_gps_data_tag           4
#define SystemStatePacket_simple_sensor_reading_tag 5
#define Packet_header_tag                        1
#define Packet_schedule_config_packet_tag        2
#define Packet_system_state_packet_tag           3

/* Struct field encoding specification for nanopb */
#define PacketHeader_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   system_uid,        1) \
X(a, STATIC,   SINGULAR, UINT32,   ms_from_start,     2) \
X(a, STATIC,   SINGULAR, UINT64,   epoch,             3) \
X(a, STATIC,   SINGULAR, UINT32,   packet_index,      4)
#define PacketHeader_CALLBACK NULL
#define PacketHeader_DEFAULT NULL

#define TimeWindow_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   start_hour,        1) \
X(a, STATIC,   SINGULAR, UINT32,   end_hour,          2)
#define TimeWindow_CALLBACK NULL
#define TimeWindow_DEFAULT NULL

#define SamplingConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   sample_interval_min,   2)
#define SamplingConfig_CALLBACK NULL
#define SamplingConfig_DEFAULT NULL

#define GPSConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   sample_interval_min,   2) \
X(a, STATIC,   SINGULAR, UINT32,   accuracy,          3)
#define GPSConfig_CALLBACK NULL
#define GPSConfig_DEFAULT NULL

#define RadioOTAA_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    dev_eui,           1) \
X(a, CALLBACK, SINGULAR, BYTES,    join_eui,          2) \
X(a, CALLBACK, SINGULAR, BYTES,    app_key,           3)
#define RadioOTAA_CALLBACK pb_default_field_callback
#define RadioOTAA_DEFAULT NULL

#define RadioABP_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    dev_addr,          1) \
X(a, CALLBACK, SINGULAR, BYTES,    nwk_s_key,         2) \
X(a, CALLBACK, SINGULAR, BYTES,    app_s_key,         3) \
X(a, CALLBACK, SINGULAR, BYTES,    f_nwk_s_int_key,   4) \
X(a, CALLBACK, SINGULAR, BYTES,    s_nwk_s_int_key,   5)
#define RadioABP_CALLBACK pb_default_field_callback
#define RadioABP_DEFAULT NULL

#define RadioConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UENUM,    region,            2) \
X(a, STATIC,   SINGULAR, UENUM,    auth,              3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (credentials,otaa,credentials.otaa),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (credentials,abp,credentials.abp),   5) \
X(a, STATIC,   SINGULAR, UINT32,   transmit_interval_min,   6) \
X(a, STATIC,   SINGULAR, BOOL,     tx_only_on_new_gps_fix,   7) \
X(a, STATIC,   SINGULAR, INT32,    tx_power_dbm,      8)
#define RadioConfig_CALLBACK NULL
#define RadioConfig_DEFAULT NULL
#define RadioConfig_credentials_otaa_MSGTYPE RadioOTAA
#define RadioConfig_credentials_abp_MSGTYPE RadioABP

#define MicrophoneConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, BOOL,     continuous_mode,   2) \
X(a, STATIC,   SINGULAR, UINT32,   sample_length_min,   3) \
X(a, STATIC,   SINGULAR, UINT32,   sample_window_min,   4)
#define MicrophoneConfig_CALLBACK NULL
#define MicrophoneConfig_DEFAULT NULL

#define AccelerometerConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UENUM,    sample_rate,       2) \
X(a, STATIC,   SINGULAR, UENUM,    sensitivity,       3)
#define AccelerometerConfig_CALLBACK NULL
#define AccelerometerConfig_DEFAULT NULL

#define FirmwareInfo_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   version,           1)
#define FirmwareInfo_CALLBACK pb_default_field_callback
#define FirmwareInfo_DEFAULT NULL

#define ScheduledConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  window,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  light,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  environmental,     3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  particulate,       4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gps,               5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  radio,             6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  microphone,        7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  accelerometer,     8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  firmware,          9)
#define ScheduledConfig_CALLBACK NULL
#define ScheduledConfig_DEFAULT NULL
#define ScheduledConfig_window_MSGTYPE TimeWindow
#define ScheduledConfig_light_MSGTYPE SamplingConfig
#define ScheduledConfig_environmental_MSGTYPE SamplingConfig
#define ScheduledConfig_particulate_MSGTYPE SamplingConfig
#define ScheduledConfig_gps_MSGTYPE GPSConfig
#define ScheduledConfig_radio_MSGTYPE RadioConfig
#define ScheduledConfig_microphone_MSGTYPE MicrophoneConfig
#define ScheduledConfig_accelerometer_MSGTYPE AccelerometerConfig
#define ScheduledConfig_firmware_MSGTYPE FirmwareInfo

#define ScheduleConfigPacket_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  schedules,         1)
#define ScheduleConfigPacket_CALLBACK pb_default_field_callback
#define ScheduleConfigPacket_DEFAULT NULL
#define ScheduleConfigPacket_schedules_MSGTYPE ScheduledConfig

#define SimpleSensorReading_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   index,             1) \
X(a, STATIC,   SINGULAR, UINT32,   epoch,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       3) \
X(a, STATIC,   SINGULAR, FLOAT,    humidity,          4) \
X(a, STATIC,   SINGULAR, FLOAT,    pressure,          5) \
X(a, STATIC,   SINGULAR, FLOAT,    gas,               6) \
X(a, STATIC,   SINGULAR, FLOAT,    pm2_5,             7) \
X(a, STATIC,   SINGULAR, UINT32,   light,             8) \
X(a, STATIC,   SINGULAR, UENUM,    activity,          9) \
X(a, STATIC,   SINGULAR, UINT32,   steps,            10) \
X(a, STATIC,   SINGULAR, BOOL,     particulate_static_obstructed,  11) \
X(a, STATIC,   SINGULAR, BOOL,     particulate_dynamic_obstructed,  12) \
X(a, STATIC,   SINGULAR, BOOL,     particulate_outside_detection_limits,  13)
#define SimpleSensorReading_CALLBACK NULL
#define SimpleSensorReading_DEFAULT NULL

#define BatteryState_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     charging,          1) \
X(a, STATIC,   SINGULAR, FLOAT,    voltage,           2) \
X(a, STATIC,   OPTIONAL, FLOAT,    percentage,        3)
#define BatteryState_CALLBACK NULL
#define BatteryState_DEFAULT NULL

#define SDCardState_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     detected,          1) \
X(a, STATIC,   SINGULAR, UINT64,   space_remaining,   2) \
X(a, STATIC,   SINGULAR, UINT64,   total_space,       3)
#define SDCardState_CALLBACK NULL
#define SDCardState_DEFAULT NULL

#define GPSData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    latitude,          1) \
X(a, STATIC,   SINGULAR, FLOAT,    longitude,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    altitude,          3) \
X(a, STATIC,   SINGULAR, FLOAT,    speed,             4) \
X(a, STATIC,   SINGULAR, FLOAT,    heading,           5)
#define GPSData_CALLBACK NULL
#define GPSData_DEFAULT NULL

#define SystemStatePacket_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     engage_state,      1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  battery_state,     2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sdcard_state,      3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gps_data,          4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  simple_sensor_reading,   5)
#define SystemStatePacket_CALLBACK NULL
#define SystemStatePacket_DEFAULT NULL
#define SystemStatePacket_battery_state_MSGTYPE BatteryState
#define SystemStatePacket_sdcard_state_MSGTYPE SDCardState
#define SystemStatePacket_gps_data_MSGTYPE GPSData
#define SystemStatePacket_simple_sensor_reading_MSGTYPE SimpleSensorReading

#define Packet_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,schedule_config_packet,payload.schedule_config_packet),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,system_state_packet,payload.system_state_packet),   3)
#define Packet_CALLBACK NULL
#define Packet_DEFAULT NULL
#define Packet_header_MSGTYPE PacketHeader
#define Packet_payload_schedule_config_packet_MSGTYPE ScheduleConfigPacket
#define Packet_payload_system_state_packet_MSGTYPE SystemStatePacket

extern const pb_msgdesc_t PacketHeader_msg;
extern const pb_msgdesc_t TimeWindow_msg;
extern const pb_msgdesc_t SamplingConfig_msg;
extern const pb_msgdesc_t GPSConfig_msg;
extern const pb_msgdesc_t RadioOTAA_msg;
extern const pb_msgdesc_t RadioABP_msg;
extern const pb_msgdesc_t RadioConfig_msg;
extern const pb_msgdesc_t MicrophoneConfig_msg;
extern const pb_msgdesc_t AccelerometerConfig_msg;
extern const pb_msgdesc_t FirmwareInfo_msg;
extern const pb_msgdesc_t ScheduledConfig_msg;
extern const pb_msgdesc_t ScheduleConfigPacket_msg;
extern const pb_msgdesc_t SimpleSensorReading_msg;
extern const pb_msgdesc_t BatteryState_msg;
extern const pb_msgdesc_t SDCardState_msg;
extern const pb_msgdesc_t GPSData_msg;
extern const pb_msgdesc_t SystemStatePacket_msg;
extern const pb_msgdesc_t Packet_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define PacketHeader_fields &PacketHeader_msg
#define TimeWindow_fields &TimeWindow_msg
#define SamplingConfig_fields &SamplingConfig_msg
#define GPSConfig_fields &GPSConfig_msg
#define RadioOTAA_fields &RadioOTAA_msg
#define RadioABP_fields &RadioABP_msg
#define RadioConfig_fields &RadioConfig_msg
#define MicrophoneConfig_fields &MicrophoneConfig_msg
#define AccelerometerConfig_fields &AccelerometerConfig_msg
#define FirmwareInfo_fields &FirmwareInfo_msg
#define ScheduledConfig_fields &ScheduledConfig_msg
#define ScheduleConfigPacket_fields &ScheduleConfigPacket_msg
#define SimpleSensorReading_fields &SimpleSensorReading_msg
#define BatteryState_fields &BatteryState_msg
#define SDCardState_fields &SDCardState_msg
#define GPSData_fields &GPSData_msg
#define SystemStatePacket_fields &SystemStatePacket_msg
#define Packet_fields &Packet_msg

/* Maximum encoded size of messages (where known) */
/* RadioOTAA_size depends on runtime parameters */
/* RadioABP_size depends on runtime parameters */
/* RadioConfig_size depends on runtime parameters */
/* FirmwareInfo_size depends on runtime parameters */
/* ScheduledConfig_size depends on runtime parameters */
/* ScheduleConfigPacket_size depends on runtime parameters */
/* Packet_size depends on runtime parameters */
#define AccelerometerConfig_size                 6
#define BatteryState_size                        12
#define GPSConfig_size                           14
#define GPSData_size                             25
#define MESSAGE_PB_H_MAX_SIZE                    SystemStatePacket_size
#define MicrophoneConfig_size                    16
#define PacketHeader_size                        29
#define SDCardState_size                         24
#define SamplingConfig_size                      8
#define SimpleSensorReading_size                 57
#define SystemStatePacket_size                   128
#define TimeWindow_size                          12

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
